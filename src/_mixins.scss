/**
 * XLarge screen media query
 * @return Media query at xlarge screen
 */
@mixin lattice-screen-xl {
  @media (min-width: #{map-get(map-get($lattice-map, lg), breakpoint) + 1}) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen
 */
@mixin lattice-screen-lg {
  @media (min-width: #{map-get(map-get($lattice-map, md), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, lg), breakpoint)}) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen and smaller
 */
@mixin lattice-screen-lg-max {
  @media (max-width: #{map-get(map-get($lattice-map, lg), breakpoint)}) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen and larger
 */
@mixin lattice-screen-lg-min {
  @media (min-width: #{map-get(map-get($lattice-map, md), breakpoint) + 1}) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen
 */
@mixin lattice-screen-md {
  @media (min-width: #{map-get(map-get($lattice-map, sm), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, md), breakpoint)}) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen and smaller
 */
@mixin lattice-screen-md-max {
  @media (max-width: #{map-get(map-get($lattice-map, md), breakpoint)}) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen and larger
 */
@mixin lattice-screen-md-min {
  @media (min-width: #{map-get(map-get($lattice-map, sm), breakpoint) + 1 }) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen
 */
@mixin lattice-screen-sm {
  @media (min-width: #{map-get(map-get($lattice-map, xs), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, sm), breakpoint)}) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen and smaller
 */
@mixin lattice-screen-sm-max {
  @media (max-width: #{map-get(map-get($lattice-map, sm), breakpoint)}) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen and larger
 */
@mixin lattice-screen-sm-min {
  @media (min-width: #{map-get(map-get($lattice-map, xs), breakpoint) + 1}) {
    @content;
  }
}

/**
 * XSmall screen media query
 * @return Media query at xsmall screen
 */
@mixin lattice-screen-xs {
  @media (max-width: #{map-get(map-get($lattice-map, xs), breakpoint)}) {
    @content;
  }
}

/**
 * Generate base styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Base styles at the given breakpoint
 */
@mixin lattice-generate-base($breakpoint) {
  .container {
    max-width: map-get(map-get($lattice-map, $breakpoint), container-width);
    padding-left: map-get(map-get($lattice-map, $breakpoint), gutter-width);
    padding-right: map-get(map-get($lattice-map, $breakpoint), gutter-width);
  }

  .container--fluid { max-width: 100%; }

  .grid {
    margin-left: -#{map-get(map-get($lattice-map, $breakpoint), gutter-width)};
    margin-right: -#{map-get(map-get($lattice-map, $breakpoint), gutter-width)};
  }

  [class*="grid__col-"] {
    padding-left: map-get(map-get($lattice-map, $breakpoint), gutter-width);
    padding-right: map-get(map-get($lattice-map, $breakpoint), gutter-width);
  }
}

/**
 * Generate grid styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Grid styles at the given breakpoint
 */
@mixin lattice-generate-grid($breakpoint) {
  $namespace: 'default';

  @if $breakpoint == 'default' {
    $namespace: '';
  } @else {
    $namespace: $breakpoint + '-';
  }

  /* Grid level utilities */
  // Grid alignment
  .#{$namespace}grid--center { justify-content: center; }
  .#{$namespace}grid--justify { justify-content: space-between; }
  .#{$namespace}grid--left { justify-content: flex-start; }
  .#{$namespace}grid--right { justify-content: flex-end; }
  .#{$namespace}grid--top { align-items: flex-start; }
  .#{$namespace}grid--middle { align-items: center; }
  .#{$namespace}grid--bottom { align-items: flex-end; }
  .#{$namespace}grid--stretch { align-items: stretch; }

  /* Column level utilities */
  // Column alignment
  .#{$namespace}grid__col--left {
    margin-left: 0;
    margin-right: auto;
  }

  .#{$namespace}grid__col--right {
    margin-left: auto;
    margin-right: 0;
  }

  .#{$namespace}grid__col--top { align-self: flex-start; }
  .#{$namespace}grid__col--middle { align-self: center; }
  .#{$namespace}grid__col--bottom { align-self: flex-end; }
  .#{$namespace}grid__col--stretch { align-self: stretch; }
  .#{$namespace}grid__col--hidden { display: none; }
  .#{$namespace}grid__col--visible { display: block; }

  // Column ordering
  @for $i from 1 through 12 {
    .#{$namespace}grid__col--order-#{$i} { order: #{$i}; }
  }

  .#{$namespace}grid__col--order-first { order: -1; }
  .#{$namespace}grid__col--order-last { order: 9999; }

  // Column offsets
  @for $i from 0 through 12 {
    .#{$namespace}grid__col--offset-#{$i} { margin-left: #{$i / 12 * 100%}; }
  }

  // Column widths
  @for $i from 1 through 12 {
    .#{$namespace}grid__col-#{$i} { width: #{$i / 12 * 100%}; }
  }
}

/**
 * Generate Lattice styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Lattice styles at the given breakpoint
 */
@mixin lattice-generate($breakpoint) {
  @include lattice-generate-base($breakpoint);
  @include lattice-generate-grid($breakpoint);
}
