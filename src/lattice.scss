/*! Lattice v1.0.0 | MIT License | https://github.com/alexchantastic/lattice.css */

/* Variables
   ========================================================================== */
$lattice-enable-responsive: true !default;

$lattice-breakpoint-lg: 1200px !default;
$lattice-breakpoint-md: 992px !default;
$lattice-breakpoint-sm: 768px !default;
$lattice-breakpoint-xs: 544px !default;

$lattice-container-width-default: 1140px !default;
$lattice-container-width-xl: $lattice-container-width-default !default;
$lattice-container-width-lg: 940px !default;
$lattice-container-width-md: 720px !default;
$lattice-container-width-sm: 576px !default;
$lattice-container-width-xs: 100% !default;

$lattice-gutter-width-default: 15px !default;
$lattice-gutter-width-xl: $lattice-gutter-width-default !default;
$lattice-gutter-width-lg: $lattice-gutter-width-default !default;
$lattice-gutter-width-md: $lattice-gutter-width-default !default;
$lattice-gutter-width-sm: $lattice-gutter-width-default !default;
$lattice-gutter-width-xs: $lattice-gutter-width-default !default;

/**
 * Mapping of all variables used within Lattice
 * @var breakpoint      {length}            Viewport size to break at
 * @var container-width {length|percentage} Width of .container at the given screen
 * @var gutter-width    {length}            Space between each grid column as applied on both sides
 */
$lattice-map: (
  default: (
    container-width: $lattice-container-width-default,
    gutter-width: $lattice-gutter-width-default,
  ),
  xl: (
    container-width: $lattice-container-width-xl,
    gutter-width: $lattice-gutter-width-xl,
  ),
  lg: (
    breakpoint: $lattice-breakpoint-lg,
    container-width: $lattice-container-width-lg,
    gutter-width: $lattice-gutter-width-lg,
  ),
  md: (
    breakpoint: $lattice-breakpoint-md,
    container-width: $lattice-container-width-md,
    gutter-width: $lattice-gutter-width-md,
  ),
  sm: (
    breakpoint: $lattice-breakpoint-sm,
    container-width: $lattice-container-width-sm,
    gutter-width: $lattice-gutter-width-sm,
  ),
  xs: (
    breakpoint: $lattice-breakpoint-xs,
    container-width: $lattice-container-width-xs,
    gutter-width: $lattice-gutter-width-xs,
  )
);

/* Mixins
   ========================================================================== */
/**
 * XLarge screen media query
 * @return Media query at xlarge screen
 */
@mixin lattice-screen-xl {
  @media (min-width: #{map-get(map-get($lattice-map, lg), breakpoint) + 1 }) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen
 */
@mixin lattice-screen-lg {
  @media (min-width: #{map-get(map-get($lattice-map, md), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, lg), breakpoint)}) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen and smaller
 */
@mixin lattice-screen-lg-max {
  @media (max-width: #{map-get(map-get($lattice-map, lg), breakpoint)}) {
    @content;
  }
}

/**
 * Large screen media query
 * @return Media query at large screen and larger
 */
@mixin lattice-screen-lg-min {
  @media (min-width: #{map-get(map-get($lattice-map, md), breakpoint) + 1 }) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen
 */
@mixin lattice-screen-md {
  @media (min-width: #{map-get(map-get($lattice-map, sm), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, md), breakpoint)}) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen and smaller
 */
@mixin lattice-screen-md-max {
  @media (max-width: #{map-get(map-get($lattice-map, md), breakpoint)}) {
    @content;
  }
}

/**
 * Medium screen media query
 * @return Media query at medium screen and larger
 */
@mixin lattice-screen-md-min {
  @media (min-width: #{map-get(map-get($lattice-map, sm), breakpoint) + 1 }) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen
 */
@mixin lattice-screen-sm {
  @media (min-width: #{map-get(map-get($lattice-map, xs), breakpoint) + 1}) and
         (max-width: #{map-get(map-get($lattice-map, sm), breakpoint)}) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen and smaller
 */
@mixin lattice-screen-sm-max {
  @media (max-width: #{map-get(map-get($lattice-map, sm), breakpoint)}) {
    @content;
  }
}

/**
 * Small screen media query
 * @return Media query at small screen and larger
 */
@mixin lattice-screen-sm-min {
  @media (min-width: #{map-get(map-get($lattice-map, xs), breakpoint) + 1 }) {
    @content;
  }
}

/**
 * XSmall screen media query
 * @return Media query at xsmall screen
 */
@mixin lattice-screen-xs {
  @media (max-width: #{map-get(map-get($lattice-map, xs), breakpoint)}) {
    @content;
  }
}

/**
 * Generate base styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Base styles at the given breakpoint
 */
@mixin lattice-generate-base($breakpoint) {
  .container {
    max-width: map-get(map-get($lattice-map, $breakpoint), container-width);
    padding-right: map-get(map-get($lattice-map, $breakpoint), gutter-width);
    padding-left: map-get(map-get($lattice-map, $breakpoint), gutter-width);
  }

  .container--fluid { max-width: 100%; }

  .grid {
    margin-right: -#{map-get(map-get($lattice-map, $breakpoint), gutter-width)};
    margin-left: -#{map-get(map-get($lattice-map, $breakpoint), gutter-width)};
  }

  [class*="grid__col-"] {
    padding-right: map-get(map-get($lattice-map, $breakpoint), gutter-width);
    padding-left: map-get(map-get($lattice-map, $breakpoint), gutter-width);
  }
}

/**
 * Generate grid styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Grid styles at the given breakpoint
 */
@mixin lattice-generate-grid($breakpoint) {
  $namespace: 'default';

  @if $breakpoint == 'default' {
    $namespace: '';
  }
  @else {
    $namespace: $breakpoint + '-';
  }

  /* Grid level utilities */
  // Grid alignment
  .grid--#{$namespace}center { justify-content: center; }
  .grid--#{$namespace}justify { justify-content: space-between; }
  .grid--#{$namespace}left { justify-content: flex-start; }
  .grid--#{$namespace}right { justify-content: flex-end; }
  .grid--#{$namespace}top { align-items: flex-start; }
  .grid--#{$namespace}middle { align-items: center; }
  .grid--#{$namespace}bottom { align-items: flex-end; }
  .grid--#{$namespace}stretch { align-items: stretch; }

  /* Column level utilities */
  // Column alignment
  .grid__col--#{$namespace}left {
    margin-right: auto;
    margin-left: 0;
  }
  .grid__col--#{$namespace}right {
    margin-right: 0;
    margin-left: auto;
  }
  .grid__col--#{$namespace}top { align-self: flex-start; }
  .grid__col--#{$namespace}middle { align-self: center; }
  .grid__col--#{$namespace}bottom { align-self: flex-end; }
  .grid__col--#{$namespace}stretch { align-self: stretch; }
  .grid__col--#{$namespace}hidden { display: none; }
  .grid__col--#{$namespace}visible { display: block; }

  // Column ordering
  @for $i from 1 through 12 {
    .grid__col--#{$namespace}order-#{$i} { order: #{$i}; }
  }
  .grid__col--#{$namespace}order-first { order: -1; }
  .grid__col--#{$namespace}order-last { order: 9999; }

  // Column offsets
  @for $i from 0 through 12 {
    .grid__col--#{$namespace}offset-#{$i} { margin-left: #{$i / 12 * 100%}; }
  }

  @if $breakpoint == 'default' {
    $namespace: '';
  }
  @else {
    $namespace: '-' + $breakpoint;
  }

  // Column widths
  @for $i from 1 through 12 {
    .grid__col#{$namespace}-#{$i} { width: #{$i / 12 * 100%}; }    
  }
}

/**
 * Generate Lattice styles
 * @param {string} Breakpoint string value (xl, lg, md, sm, xs)
 * @return Lattice styles at the given breakpoint
 */
@mixin lattice-generate($breakpoint) {
  @include lattice-generate-base($breakpoint);
  @include lattice-generate-grid($breakpoint);
}

/* Styles
   ========================================================================== */
.container,
.grid,
[class*="grid__col-"] {
  box-sizing: border-box;
}

.container,
[class*="grid__col-"] {
  display: block;
}

.container {
  margin-right: auto;
  margin-left: auto;
}

.grid {
  display: flex;
  flex-wrap: wrap;
  align-items: flex-start;
}

[class*="grid__col-"] { width: 100%; }

// Generate styles for default screens
@include lattice-generate('default');

@if $lattice-enable-responsive {
  // Generate styles for xlarge screens
  @include lattice-screen-xl {
    @include lattice-generate('xl');
  }

  // Generate styles for large screens
  @include lattice-screen-lg {
    @include lattice-generate('lg');
  }

  @include lattice-screen-lg-max {
    @include lattice-generate-grid('lg-max');
  }

  @include lattice-screen-lg-min {
    @include lattice-generate-grid('lg-min');
  }

  // Generate styles for medium screens
  @include lattice-screen-md {
    @include lattice-generate('md');
  }

  @include lattice-screen-md-max {
    @include lattice-generate-grid('md-max');
  }

  @include lattice-screen-md-min {
    @include lattice-generate-grid('md-min');
  }

  // Generate styles for small screens
  @include lattice-screen-sm {
    @include lattice-generate('sm');
  }

  @include lattice-screen-sm-max {
    @include lattice-generate-grid('sm-max');
  }

  @include lattice-screen-sm-min {
    @include lattice-generate-grid('sm-min');
  }

  // Generate styles for xsmall screens
  @include lattice-screen-xs {
    @include lattice-generate('xs');
  }
}
